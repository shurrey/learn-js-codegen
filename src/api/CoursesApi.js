/**
 * Learn APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3900.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Body42 from '../model/Body42';
import Body43 from '../model/Body43';
import Body44 from '../model/Body44';
import CourseChild from '../model/CourseChild';
import CourseTask from '../model/CourseTask';
import CourseV2 from '../model/CourseV2';
import InlineResponse20029 from '../model/InlineResponse20029';
import InlineResponse20030 from '../model/InlineResponse20030';
import RestException from '../model/RestException';

/**
* Courses service.
* @module api/CoursesApi
* @version 3900.6.0
*/
export default class CoursesApi {

    /**
    * Constructs a new CoursesApi. 
    * @alias module:api/CoursesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the learnApiPublicV1CoursesCourseIdChildrenChildCourseIdDelete operation.
     * @callback module:api/CoursesApi~learnApiPublicV1CoursesCourseIdChildrenChildCourseIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Child Course
     * Delete a course-course relationship, resulting in two unrelated courses.  Minimal entitlements required:  - For courses: &#x27;system.course.separate-out.VIEW&#x27; - For organizations: &#x27;system.org.separate-out.VIEW&#x27;  **Since**: 3900.4.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV1CoursesCourseIdChildrenChildCourseIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    learnApiPublicV1CoursesCourseIdChildrenChildCourseIdDelete(courseId, childCourseId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'courseId': courseId,
        'childCourseId': childCourseId
      };
      let queryParams = {
        'separationStyle': opts['separationStyle']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/learn/api/public/v1/courses/{courseId}/children/{childCourseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV1CoursesCourseIdChildrenChildCourseIdGet operation.
     * @callback module:api/CoursesApi~learnApiPublicV1CoursesCourseIdChildrenChildCourseIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseChild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Child
     * Loads a specific course cross-listing.  The &#x27;system.course.cross-list.VIEW&#x27; or &#x27;system.org.cross-list.VIEW&#x27; entitlement is needed.  **Since**: 3000.11.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV1CoursesCourseIdChildrenChildCourseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseChild}
     */
    learnApiPublicV1CoursesCourseIdChildrenChildCourseIdGet(courseId, childCourseId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'courseId': courseId,
        'childCourseId': childCourseId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CourseChild;

      return this.apiClient.callApi(
        '/learn/api/public/v1/courses/{courseId}/children/{childCourseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV1CoursesCourseIdChildrenChildCourseIdPut operation.
     * @callback module:api/CoursesApi~learnApiPublicV1CoursesCourseIdChildrenChildCourseIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseChild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Child Course
     * Merges two courses (or organizations) together. Commonly referred to as cross-listing. Only a single level of parent/child relationship is supported (ie. Parent courses may not become children, similarly, a child cannot become a parent)  Minimal entitlements required:  - For courses: &#x27;system.course.cross-list.VIEW&#x27; - For organizations: &#x27;system.org.cross-list.VIEW&#x27;  Upon being merged, all enrollments in the child course are replicated in the parent course, and any future enrollment changes in the child course are also synchronized automatically with the parent course. Duplicate student enrollments will result in a 409 CONFLICT unless the &#x27;ignoreEnrollmentErrors&#x27; query parameter is set to true. Users in other roles, such as grader, teaching assistant, or guest, are assigned roles based on the last time they are added to the parent course.  **Since**: 3400.1.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV1CoursesCourseIdChildrenChildCourseIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseChild}
     */
    learnApiPublicV1CoursesCourseIdChildrenChildCourseIdPut(courseId, childCourseId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'courseId': courseId,
        'childCourseId': childCourseId
      };
      let queryParams = {
        'ignoreEnrollmentErrors': opts['ignoreEnrollmentErrors'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CourseChild;

      return this.apiClient.callApi(
        '/learn/api/public/v1/courses/{courseId}/children/{childCourseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV1CoursesCourseIdChildrenGet operation.
     * @callback module:api/CoursesApi~learnApiPublicV1CoursesCourseIdChildrenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Course Children
     * Returns a list of course cross-listings.  The &#x27;system.course.cross-list.VIEW&#x27; or &#x27;system.org.cross-list.VIEW&#x27; or &#x27;course.children.VIEW&#x27; entitlement is needed.  **Since**: 3000.11.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV1CoursesCourseIdChildrenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20029}
     */
    learnApiPublicV1CoursesCourseIdChildrenGet(courseId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'fields': opts['fields'],
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/learn/api/public/v1/courses/{courseId}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV1CoursesCourseIdCrossListSetGet operation.
     * @callback module:api/CoursesApi~learnApiPublicV1CoursesCourseIdCrossListSetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cross List Set
     * Returns the course cross-listing set for the specified course. This will return any and all parent/child associations regardless of the specified course being a parent or child course. The result will be empty if the specified course is not cross-listed.  The &#x27;system.course.cross-list.VIEW&#x27; or &#x27;system.org.cross-list.VIEW&#x27; entitlement is needed.  **Since**: 3400.1.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV1CoursesCourseIdCrossListSetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20029}
     */
    learnApiPublicV1CoursesCourseIdCrossListSetGet(courseId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/learn/api/public/v1/courses/{courseId}/crossListSet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV1CoursesCourseIdTasksTaskIdGet operation.
     * @callback module:api/CoursesApi~learnApiPublicV1CoursesCourseIdTasksTaskIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Task
     * Check the status of a queued task associated with a Course. Returns 200 unless task is complete. If task is complete this endpoint will return a 303 SEE OTHER with a Location header providing a URI to the GET Course endpoint. Statistical data shows that the average copy task duration is under a second. However, very large courses can take several minutes. Also important to note is that these background tasks can potentially be queued behind other system tasks therefore prolonging the time a task stays in the &#x60;Queued&#x60; status. We recommend that this endpoint be polled every 60 seconds while waiting for a Course copy to complete.  Users with entitlements &#x27;system.course.copy.EXECUTE&#x27; can view the task status.  **Since**: 3300.0.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV1CoursesCourseIdTasksTaskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseTask}
     */
    learnApiPublicV1CoursesCourseIdTasksTaskIdGet(courseId, taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'courseId': courseId,
        'taskId': taskId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CourseTask;

      return this.apiClient.callApi(
        '/learn/api/public/v1/courses/{courseId}/tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV2CoursesCourseIdCopyPost operation.
     * @callback module:api/CoursesApi~learnApiPublicV2CoursesCourseIdCopyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy Course
     * Creates a copy of an existing Course into a new Course or an existing course. It is possible to limit the course content to be copied using options.  Users with entitlements &#x27;system.course.copy.EXECUTE&#x27; can create a course copy. Users with entitlements &#x27;system.org.copy.EXECUTE&#x27; can create an organization copy. Users with entitlement &#x27;course.content.copy.exact.EXECUTE&#x27; can copy Course/Organization materials to a new or existing course Users with entitlement &#x27;course.content.copy.new.EXECUTE&#x27; can copy Course/Organization materials to a new course. All users&#x27;s must also have &#x27;course.content.copy.EXECUTE&#x27; entitlement associated with the specified source courseId.  **Since**: 3800.2.0
     * @param {module:api/CoursesApi~learnApiPublicV2CoursesCourseIdCopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    learnApiPublicV2CoursesCourseIdCopyPost(body, courseId, callback) {
      let postBody = body;

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/learn/api/public/v2/courses/{courseId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV3CoursesCourseIdDelete operation.
     * @callback module:api/CoursesApi~learnApiPublicV3CoursesCourseIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Course
     * Registers a queued task to delete a course or organization in asynchronous fashion.  The &#x27;system.course.DELETE&#x27; entitlement is needed to delete a course, while &#x27;system.org.DELETE&#x27; is needed for an organization.  **Since**: 3800.1.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV3CoursesCourseIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    learnApiPublicV3CoursesCourseIdDelete(courseId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
        'removeFiles': opts['removeFiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/learn/api/public/v3/courses/{courseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV3CoursesCourseIdGet operation.
     * @callback module:api/CoursesApi~learnApiPublicV3CoursesCourseIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Course
     * Loads a specific course or organization.  To view disabled courses a user must have the entitlement &#x27;system.course.VIEW&#x27;.  Users with the &#x27;course.configure-properties.EXECUTE&#x27; entitlement can access all course properties.  Users enrolled in the course have read access to all properties except:  - uuid - externalId - dataSourceId - created - allowGuests - enrollment.accessCode  Users with no access to the course only have read access to the following properties:  - id - courseId - name - description - organization - closedComplete - termId - availability.available - availability.duration.type - availability.duration.start - availability.duration.end - availability.duration.daysOfUse If the course enrollment is self-enroll, all users can view the course as though they were enrolled.  **Since**: 3800.1.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV3CoursesCourseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseV2}
     */
    learnApiPublicV3CoursesCourseIdGet(courseId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CourseV2;

      return this.apiClient.callApi(
        '/learn/api/public/v3/courses/{courseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV3CoursesCourseIdPatch operation.
     * @callback module:api/CoursesApi~learnApiPublicV3CoursesCourseIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Course
     * Updates a course or organization.  To update a course, the user must have either &#x27;system.course|org.properties.MODIFY&#x27; or &#x27;course.configure-properties.EXECUTE&#x27; entitlements.  However, if the user has the latter entitlement, then additional entitlements are needed to be able to update certain fields, as shown below:    | Field                           | Entitlements Required                                                  |  |---------------------------------|------------------------------------------------------------------------|  | name                            | course.name.MODIFY                                                     |  | description                     | course.name.MODIFY                                                     |  | allowGuests                     | course.configure-guest-access.EXECUTE                                  |  | enrollment.type                 | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |  | enrollment.start                | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |  | enrollment.end                  | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |  | enrollment.accessCode           | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |  | availability.available          | course.configure-properties.EXECUTE, course.availability.MODIFY        |  | locale.id                       | course.configure-properties.EXECUTE, course.locale.MODIFY              |  | locale.force                    | course.configure-properties.EXECUTE, course.locale.MODIFY              |  | availability.duration.type      | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |  | availability.duration.start     | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |  | availability.duration.end       | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |  | availability.duration.daysOfUse | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |    **Since**: 3800.1.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV3CoursesCourseIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseV2}
     */
    learnApiPublicV3CoursesCourseIdPatch(body, courseId, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'courseId': courseId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CourseV2;

      return this.apiClient.callApi(
        '/learn/api/public/v3/courses/{courseId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV3CoursesGet operation.
     * @callback module:api/CoursesApi~learnApiPublicV3CoursesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Courses
     * Returns a list of courses and organizations.  To view disabled courses a user must have the entitlement &#x27;system.course.VIEW&#x27;.  Users with the &#x27;course.configure-properties.EXECUTE&#x27; course entitlement, or the &#x27;system.course.properties.MODIFY&#x27; system entitlement can access all course properties.  Users enrolled in the course have read access to all properties except:  - uuid - externalId - dataSourceId - created - allowGuests - enrollment.accessCode  Users who are not enrolled in the course and do not have associated entitlements only have read access to the following properties:  - id - courseId - name - description - organization - readOnly - termId - availability.available - availability.duration.type - availability.duration.start - availability.duration.end - availability.duration.daysOfUse If the course enrollment is self-enroll, all users can view the course as though they were enrolled.  **Since**: 3800.1.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV3CoursesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20030}
     */
    learnApiPublicV3CoursesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'modified': opts['modified'],
        'modifiedCompare': opts['modifiedCompare'],
        'courseId': opts['courseId'],
        'name': opts['name'],
        'description': opts['description'],
        'externalId': opts['externalId'],
        'created': opts['created'],
        'allowGuests': opts['allowGuests'],
        'createdCompare': opts['createdCompare'],
        'availability.available': opts['availabilityAvailable'],
        'dataSourceId': opts['dataSourceId'],
        'termId': opts['termId'],
        'organization': opts['organization'],
        'sort': opts['sort'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/learn/api/public/v3/courses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV3CoursesPost operation.
     * @callback module:api/CoursesApi~learnApiPublicV3CoursesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CourseV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Course
     * Creates a course or organization.  The &#x27;system.course.CREATE&#x27; entitlement is needed to create a course, while &#x27;system.org.CREATE&#x27; is needed for an organization.  **Since**: 3800.1.0
     * @param {Object} opts Optional parameters
     * @param {module:api/CoursesApi~learnApiPublicV3CoursesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CourseV2}
     */
    learnApiPublicV3CoursesPost(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CourseV2;

      return this.apiClient.callApi(
        '/learn/api/public/v3/courses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
