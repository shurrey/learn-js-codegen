/**
 * Learn APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3900.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import InlineResponse20038 from '../model/InlineResponse20038';
import ProctoringService from '../model/ProctoringService';

/**
* Proctoring service.
* @module api/ProctoringApi
* @version 3900.6.0
*/
export default class ProctoringApi {

    /**
    * Constructs a new ProctoringApi. 
    * @alias module:api/ProctoringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the learnApiPublicV1ProctoringServicesGet operation.
     * @callback module:api/ProctoringApi~learnApiPublicV1ProctoringServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20038} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Proctoring Services
     * Returns a list of proctoring services Supports the standard paging query parameters, with a maximum page size of 1000. No entitlement check is performed as this data is not restricted. Any secure fields such as keys/secrets are not included in the results.  **Since**: 3500.6.0
     * @param {Object} opts Optional parameters
     * @param {module:api/ProctoringApi~learnApiPublicV1ProctoringServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20038}
     */
    learnApiPublicV1ProctoringServicesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'availability.available': opts['availabilityAvailable'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20038;

      return this.apiClient.callApi(
        '/learn/api/public/v1/proctoring/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the learnApiPublicV1ProctoringServicesProctoringServiceIdGet operation.
     * @callback module:api/ProctoringApi~learnApiPublicV1ProctoringServicesProctoringServiceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProctoringService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Proctoring Service
     * Returns the proctoring service with the specified Id No entitlement check is performed as this data is not restricted. Any secure fields such as keys/secrets are not included in the results.  **Since**: 3500.6.0
     * @param {Object} opts Optional parameters
     * @param {module:api/ProctoringApi~learnApiPublicV1ProctoringServicesProctoringServiceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProctoringService}
     */
    learnApiPublicV1ProctoringServicesProctoringServiceIdGet(proctoringServiceId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'proctoringServiceId': proctoringServiceId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProctoringService;

      return this.apiClient.callApi(
        '/learn/api/public/v1/proctoring/services/{proctoringServiceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
