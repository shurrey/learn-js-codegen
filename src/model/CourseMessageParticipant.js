/**
 * Learn APIs
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3900.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
* The CourseMessageParticipant model module.
* @module model/CourseMessageParticipant
* @version 3900.6.0
*/
export default class CourseMessageParticipant {
    /**
    * Constructs a new <code>CourseMessageParticipant</code>.
    * @alias module:model/CourseMessageParticipant
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>CourseMessageParticipant</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/CourseMessageParticipant} obj Optional instance to populate.
    * @return {module:model/CourseMessageParticipant} The populated <code>CourseMessageParticipant</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CourseMessageParticipant();
                        
            
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('participationType')) {
                obj['participationType'] = ApiClient.convertToType(data['participationType'], 'String');
            }
        }
        return obj;
    }

    /**
    * The id of the message
    * @member {String} messageId
    */
    'messageId' = undefined;
    /**
    * The id of the participant
    * @member {String} userId
    */
    'userId' = undefined;
    /**
    * @member {module:model/User} user
    */
    'user' = undefined;
    /**
    * The type of participation   | Type      | Description  | --------- | --------- | | From | Sender user from the message | | To | The to or recipient user of the message | | Cc | The cc user of the message | | Bcc | The bcc user of the message | 
    * @member {module:model/CourseMessageParticipant.ParticipationTypeEnum} participationType
    */
    'participationType' = undefined;



    /**
    * Allowed values for the <code>participationType</code> property.
    * @enum {String}
    * @readonly
    */
    static ParticipationTypeEnum = {
        /**
         * value: "From"
         * @const
         */
        "From": "From",
        /**
         * value: "To"
         * @const
         */
        "To": "To",
        /**
         * value: "Cc"
         * @const
         */
        "Cc": "Cc",
        /**
         * value: "Bcc"
         * @const
         */
        "Bcc": "Bcc"    };

}
